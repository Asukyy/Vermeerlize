import React, { useEffect, useState } from 'react';
import { Grid, Typography, Box, CircularProgress, TextField, InputAdornment, Dialog, DialogActions, DialogContent, IconButton } from '@mui/material';
import Card from '../components/Card';
import { Search as SearchIcon, Delete as DeleteIcon } from '@mui/icons-material';

const Home = ({ user }) => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState([]);
  const [selectedImage, setSelectedImage] = useState(null);
  const [openDialog, setOpenDialog] = useState(false);
  const fetchPosts = async () => {
    setLoading(true);
    try {
      const response = await fetch(`http://localhost:8080/api/v1/post?userId=${user._id}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      console.log(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user) {
      fetchPosts();
    }
  }, [user]);

  const handleDeletePost = (id) => {
    setAllPosts((prevPosts) => prevPosts.filter((post) => post._id !== id));
    setSearchedResults((prevResults) => prevResults.filter((post) => post._id !== id));
    setOpenDialog(false); // Ferme la modale après la suppression
  };

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) => item.name.toLowerCase().includes(searchText.toLowerCase()) ||
                    item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  const handleImageClick = (image) => {
    setSelectedImage(image);
    setOpenDialog(true); // Ouvre la modale avec l'image sélectionnée
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setSelectedImage(null);
  };

  return (
    <Box sx={{ maxWidth: '1200px', mx: 'auto', p: 3 }}>
      <Typography variant="h3" component="h1" gutterBottom>
        The Community Showcase
      </Typography>
      <Typography variant="body1" color="textSecondary" paragraph>
        Browse through a collection of imaginative and visually stunning images generated by DALL-E AI.
      </Typography>

      <TextField
        variant="outlined"
        fullWidth
        placeholder="Search something..."
        value={searchText}
        onChange={handleSearchChange}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <SearchIcon />
            </InputAdornment>
          ),
        }}
        sx={{ mb: 3 }}
      />

      {loading ? (
        <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
          <CircularProgress />
        </Box>
      ) : (
        <>
          {searchText && (
            <Typography variant="h6" color="textSecondary" gutterBottom>
              Showing Results for <strong>{searchText}</strong>:
            </Typography>
          )}
          <Grid container spacing={3}>
            {searchText ? (
              searchedResults.length ? (
                searchedResults.map((post) => (
                  <Grid item xs={12} sm={6} md={4} key={post._id}>
                    <Card {...post} onImageClick={handleImageClick} onDelete={handleDeletePost} />
                  </Grid>
                ))
              ) : (
                <Grid item xs={12}>
                  <Typography variant="h6" color="textSecondary">
                    No Search Results Found
                  </Typography>
                </Grid>
              )
            ) : (
              allPosts.length ? (
                allPosts.map((post) => (
                  <Grid item xs={12} sm={6} md={4} key={post._id}>
                    <Card {...post} onImageClick={handleImageClick} onDelete={handleDeletePost} />
                  </Grid>
                ))
              ) : (
                <Grid item xs={12}>
                  <Typography variant="h6" color="textSecondary">
                    No Posts Yet
                  </Typography>
                </Grid>
              )
            )}
          </Grid>
        </>
      )}

      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth="md" fullWidth>
        <DialogContent sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
          {selectedImage && (
            <>
              <img src={selectedImage.photo} alt={selectedImage.prompt} style={{ maxWidth: '100%', borderRadius: 8 }} />
              <Typography variant="h6" sx={{ mt: 2 }}>
                {selectedImage.name}
              </Typography>
              <Typography variant="body2" color="textSecondary">
                {selectedImage.prompt}
              </Typography>
            </>
          )}
        </DialogContent>
        <DialogActions>
          <IconButton aria-label="delete" color="error" onClick={() => handleDeletePost(selectedImage._id)}>
            <DeleteIcon />
          </IconButton>
          <IconButton aria-label="close" onClick={handleCloseDialog}>
            <SearchIcon /> {/* Utilisez une autre icône pour fermer si vous préférez */}
          </IconButton>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Home;
